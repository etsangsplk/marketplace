/**
 * @author Nikita Kolytschew
 * @version %I%, %G%
 * @since 1.0.0-SNAPSHOT
 */

// default spring-boot build-script
buildscript {
	ext {
		springBootVersion = '1.4.1.RELEASE'
		gradleDockerVersion = '1.2'
		// coberturaVersion = '2.3.2'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "se.transmode.gradle:gradle-docker:${gradleDockerVersion}"
		// classpath "net.saliman:gradle-cobertura-plugin:${coberturaVersion}"
	}
}

/** apply cpd to the root project, as this was how the plugin is intended to be used
 * using new Gradle plugins DSL see: https://github.com/aaschmid/gradle-cpd-plugin
 **/
plugins {
	id "de.aaschmid.cpd" version "1.0"
}

apply plugin: 'java'
apply plugin: 'spring-boot'

// IDE Plugins
apply plugin: 'eclipse'
apply plugin: 'idea'

/**
 * make sure, all sub project have at least the basic tasks*/
subprojects {
	apply plugin: 'base'
}

// Docker
apply plugin: 'docker'

// custom properties
apply from: "$projectDir/gradle/properties/custom_properties.gradle"

// set spring profile
def activeProfile = project.ext.activeProfile = project.hasProperty('prod') ? prodProfiles : devProfiles

// plugins
apply from: "$projectDir/gradle/plugins/checkstyle_plugin.gradle"
apply from: "$projectDir/gradle/plugins/pmd_plugin.gradle"
apply from: "$projectDir/gradle/plugins/findbugs_plugin.gradle"
apply from: "$projectDir/gradle/plugins/cpd_plugin.gradle"
apply from: "$projectDir/gradle/plugins/jacoco_plugin.gradle"
// apply from: "$projectDir/gradle/plugins/cobertura_plugin.gradle"

// default project definition
// docker image prefix will be taken from group
group = "inspectit.rocks"
version = "1.0.3-SNAPSHOT"
description = "Open Source Marketplace"
project.ext.finalName = jar.baseName

// Java Version
sourceCompatibility = 1.8
targetCompatibility = 1.8

// add jar information
jar {
	baseName = 'marketplace'
}

// tasks
apply from: "$projectDir/gradle/tasks/spring_boot_task.gradle"
apply from: "$projectDir/gradle/tasks/docker_tasks.gradle"

task testJavadoc(type: Javadoc) {
	source = sourceSets.test.allJava
	classpath = sourceSets.test.compileClasspath
	destinationDir = file("${buildQAMainExportDir}/javadoc")
	println(title == null ? '<null>' : title)
}

// define repo to obtain dependencies from
repositories {
	mavenCentral()
	// jcenter()
}

// set dependencies
ext {
	securityOauthVersion = '2.0.11.RELEASE'
}
dependencies {
	// spring boot starter
	compile('org.springframework.boot:spring-boot-starter-actuator',
			'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-starter-security')

	// security and OAuth
	compile "org.springframework.security.oauth:spring-security-oauth2:${securityOauthVersion}"

	// if dev, use embedded database
	if(activeProfile == 'dev'){
		runtime('com.h2database:h2')
	}

	// test dependencies
	testCompile('org.springframework.boot:spring-boot-starter-test',
			'org.springframework.restdocs:spring-restdocs-mockmvc')

}

// define wrapper version to 3.1
task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '3.1'
}

// replace placeholder in application.properties only, since application-dev.properties container hard coded values
processResources {
	filesMatching('**/application.properties') {
		expand(project.properties)
	}
}